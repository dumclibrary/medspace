image: docker:git

variables:
  MEDSPACE_IMAGE: $CI_REGISTRY/mclibrary/medspace
  FCREPO_IMAGE: $CI_REGISTRY/mclibrary/medspace/fcrepo
  SOLR_IMAGE: $CI_REGISTRY/mclibrary/medspace/solr

dependency_scanning:
  stage: "test"
  cache: {}
  image: docker:stable
  tags:
  - "docker"
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
  - docker:stable-dind
  script:
  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  - docker run
      --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
      --volume "$PWD:/code"
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]

sast:
  stage: "test"
  cache: {}
  image: docker:stable
  tags:
  - "docker"
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
  - docker:stable-dind
  script:
  - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  - docker run
      --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
      --volume "$PWD:/code"
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]

test:
  stage: test
  image: $CI_REGISTRY/mclibrary/medspace
  services:
    - redis:3-alpine
    - $CI_REGISTRY/mclibrary/medspace/solr
    - $CI_REGISTRY/mclibrary/medspace/fcrepo
  variables:
    REDIS_HOST: redis
    FCREPO_URL: http://$CI_REGISTRY-mclibrary-medspace-fcrepo:8080
    SOLR_URL: http://$CI_REGISTRY-mclibrary-medspace-solr:8983/solr/medspace
  script:
    - bundle install
    - bundle exec rspec

medspace_deploy:
  image: $CI_REGISTRY/mclibrary/medspace
  stage: deploy
  before_script:
    - echo "$ANSIBLE_VAULT_FILE" > ansible/group_vars/all/vault.yml
  script:
   - bin/bundle install
   - bin/rails assets:precompile RAILS_ENV=production DEVISE_SECRET_KEY=secret
   - cd ansible && ansible-playbook -i inventory deploy_medspace.yml
  tags:
    - deploy
  only:
    - master
  except:
    - schedules
  when: manual
  environment:
    name: staging
    url: https://dev-medspace.mc.duke.edu

review_app:
  stage: deploy
  variables:
    DOCKER_HOST: tcp://swarm.152.3.102.153.xip.io:2376
    DOCKER_TLS_VERIFY: 1
  image: docker:latest
  script:
    - mkdir -p ~/.docker
    - echo "$TLSCACERT" > ~/.docker/ca.pem
    - echo "$TLSCERT" > ~/.docker/cert.pem
    - echo "$TLSKEY" > ~/.docker/key.pem
    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"
    - docker stack deploy --with-registry-auth --compose-file=docker-stack-compose.yml medspace-${CI_ENVIRONMENT_SLUG}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.152.3.102.153.xip.io/
    on_stop: stop_review_app

stop_review_app:
  stage: deploy
  when: manual
  variables:
    DOCKER_HOST: tcp://swarm.152.3.102.153.xip.io:2376
    DOCKER_TLS_VERIFY: 1
  image: docker:latest
  script:
    - mkdir -p ~/.docker
    - echo "$TLSCACERT" > ~/.docker/ca.pem
    - echo "$TLSCERT" > ~/.docker/cert.pem
    - echo "$TLSKEY" > ~/.docker/key.pem
    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"
    - docker stack rm medspace-${CI_ENVIRONMENT_SLUG}
  environment:
     name: review/$CI_COMMIT_REF_NAME
     action: stop

medspace_build:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $MEDSPACE_IMAGE .
    - docker push $MEDSPACE_IMAGE
  tags:
    - docker

fcrepo_build:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $FCREPO_IMAGE docker-fcrepo
    - docker push $FCREPO_IMAGE
  tags:
    - docker

solr_build:
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker build -t $SOLR_IMAGE solr
    - docker push $SOLR_IMAGE
  tags:
    - docker